AWSTemplateFormatVersion: 2010-09-09

Transform: AWS::Serverless-2016-10-31

Description: AWS Perspective Appsync Api Stack

Parameters:

  DeploymentBucket:
    Type: String

  DeploymentBucketKey:
    Type: String

  CostAndUsageReportBucket:
    Type: String
  
  CostAndUsageResultsBucket:
    Type: String

  PerspectiveAppSyncApiId:
    Type: String

  ConfigurationAggregator:
    Type: String

  AthenaDatabaseName: 
    Type: String
    Default: 'athenacurcfn_aws_perspective_cost_and_usage'
  
  AthenaTableName:
    Type: String
    Default: 'perspective_glue_crawler'
  
  AthenaWorkgroup:
    Type: String
    Default: 'primary'

  CustomUserAgent: 
    Type: String
    Default: 'AwsSolution/SO0075/1.1.0'

Resources:

  PerspectiveCostLambdaRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: 'We are working on exposing the athena components to be able to include them here.'
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-AppSyncCostLambdaRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - athena:GetDatabase
                  - athena:StartQueryExecution
                  - athena:StopQueryExecution
                  - athena:GetQueryExecution
                  - athena:GetQueryResults
                  - ec2:DescribeRegions
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:ListMultipartUploadParts
                  - s3:AbortMultipartUpload
                  - s3:CreateBucket
                  - s3:PutObject
                Resource: 
                  - !Sub arn:aws:s3:::${CostAndUsageReportBucket}*
                  - !Sub arn:aws:s3:::${CostAndUsageResultsBucket}*
              - Effect: Allow
                Action:
                  - glue:CreateDatabase
                  - glue:DeleteDatabase
                  - glue:GetDatabase
                  - glue:GetDatabases
                  - glue:UpdateDatabase
                  - glue:CreateTable
                  - glue:DeleteTable
                  - glue:BatchDeleteTable
                  - glue:UpdateTable
                  - glue:GetTable
                  - glue:GetTables
                  - glue:BatchCreatePartition
                  - glue:CreatePartition
                  - glue:DeletePartition
                  - glue:BatchDeletePartition
                  - glue:UpdatePartition
                  - glue:GetPartition
                  - glue:GetPartitions
                  - glue:BatchGetPartition
                Resource: 
                  - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog'
                  - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${AthenaDatabaseName}' 
                  - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${AthenaDatabaseName}/${AthenaTableName}'


  PerspectiveCostFunction:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: 'Not applicable'
          - id: W92
            reason: 'Not applicable'
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt PerspectiveCostLambdaRole.Arn
      Handler: index.handler
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: !Sub ${DeploymentBucketKey}/cost.zip
      Runtime: nodejs14.x
      Description: Lambda for Appsync Cost API resolvers
      Timeout: 300
      MemorySize: 1024
      Tracing: Active
      Environment:
        Variables:
          AthenaDatabaseName: !Sub '${AthenaDatabaseName}'
          AthenaTableName: !Sub '${AthenaTableName}'
          AthenaResultsBucketName: !Sub 's3://${CostAndUsageResultsBucket}'
          AthenaWorkgroup: !Ref AthenaWorkgroup
          CustomUserAgent: !Ref CustomUserAgent

  PerspectiveCostLambdaAppSyncRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-AppSyncCostRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt PerspectiveCostFunction.Arn

  PerspectiveAppSyncCostLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      Name: Perspective_Cost_Lambda_DS
      Description: Perspective Lambda AppSync Data Source
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt PerspectiveCostLambdaAppSyncRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt PerspectiveCostFunction.Arn

  PerspectiveAppSyncReadResultsFromS3QueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      TypeName: Query
      FieldName: readResultsFromS3
      DataSourceName: !GetAtt PerspectiveAppSyncCostLambdaDataSource.Name

  PerspectiveAppSyncGetCostForServiceQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      TypeName: Query
      FieldName: getCostForService
      DataSourceName: !GetAtt PerspectiveAppSyncCostLambdaDataSource.Name

  PerspectiveAppSyncGetCostForResourceQueryByDayResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      TypeName: Query
      FieldName: getResourcesByCostByDay
      DataSourceName: !GetAtt PerspectiveAppSyncCostLambdaDataSource.Name

  PerspectiveAppSyncGetCostForResourceQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      TypeName: Query
      FieldName: getCostForResource
      DataSourceName: !GetAtt PerspectiveAppSyncCostLambdaDataSource.Name

  PerspectiveAppSyncGetResourcesByCostQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      TypeName: Query
      FieldName: getResourcesByCost
      DataSourceName: !GetAtt PerspectiveAppSyncCostLambdaDataSource.Name

  PerspectiveSettingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  PerspectiveSettingsDynamoAppSyncRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-AppSyncDynamoRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:BatchWriteItem
                Resource: !GetAtt PerspectiveSettingsTable.Arn

  PerspectiveSettingsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-AppSyncLambdaRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:BatchWriteItem
                Resource: !GetAtt PerspectiveSettingsTable.Arn
              - Effect: Allow
                Action:
                  - config:putConfigurationAggregator
                Resource: !Sub arn:aws:config:${AWS::Region}:${AWS::AccountId}*

  PerspectiveSettingsFunction:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: 'Not applicable'
          - id: W92
            reason: 'Not applicable'
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt PerspectiveSettingsLambdaRole.Arn
      Handler: index.handler
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: !Sub ${DeploymentBucketKey}/settings.zip
      Runtime: nodejs14.x
      Description: Lambda for Appsync resolvers
      Timeout: 10
      MemorySize: 1024
      Tracing: Active
      Environment:
        Variables:
          DB_TABLE: !Ref PerspectiveSettingsTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
          CONFIG_AGGREGATOR: !Ref ConfigurationAggregator
          CUSTOM_USER_AGENT: !Ref CustomUserAgent

  PerspectiveSettingsLambdaAppSyncRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-AppSyncRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt PerspectiveSettingsFunction.Arn

  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      DefinitionS3Location: !Sub s3://${DeploymentBucket}/${DeploymentBucketKey}/perspective-api.graphql

  PerspectiveAppSyncSettingsLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      Name: Perspective_AppSync_Api_Settings_Lambda_Source
      Description: Perspective Lambda AppSync Data Source
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt PerspectiveSettingsLambdaAppSyncRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt PerspectiveSettingsFunction.Arn

  PerspectiveAppSyncSettingsTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      Name: Perspective_AppSync_Api_Settings_Table_Source
      Description: Perspective Table AppSync Data Source
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt PerspectiveSettingsDynamoAppSyncRole.Arn
      DynamoDBConfig:
        TableName: !Ref PerspectiveSettingsTable
        AwsRegion: !Sub ${AWS::Region}

  PerspectiveAppSyncGetAccountQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      TypeName: Query
      FieldName: getAccount
      DataSourceName: !GetAtt PerspectiveAppSyncSettingsTableDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "Query",
            "query" : {
                "expression": "PK = :pk and begins_with(SK, :composite)",
                "expressionValues" : {
                    ":pk" : {
                        "S" : "Account"
                    },
                    ":composite": {
                        "S": "ACCNUMBER#$ctx.args.accountId"
                    }
                }
            }
        }
      ResponseMappingTemplate: |
        #set($result = {"accountId": "$ctx.args.accountId"})
        #set($regions = [])

        #foreach($item in $ctx.result.items)
        	#if($item.type.equals("account"))
            	$util.qr($result.put("lastCrawled", "$item.lastCrawled"))
            #elseif($item.type.equals("region"))
              $util.qr($regions.add({
                "name": "$item.name",
                "lastCrawled": "$item.lastCrawled"
              }))
            #end
        #end

        $util.qr($result.put("regions", $regions))

        $util.toJson($result)

  PerspectiveAppSyncAddRegionsMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      TypeName: Mutation
      FieldName: addRegions
      DataSourceName: !GetAtt PerspectiveAppSyncSettingsTableDataSource.Name
      RequestMappingTemplate: !Sub |
        #set($accountId = $ctx.args.accountId)
        #set($regions = [])
        #foreach($region in $ctx.args.regions)
            #set( $attrs = {
              "PK": "Account",
              "SK": "ACCNUMBER#$accountId#REGION#$region.name",
              "name": "$region.name",
              "accountId": "$accountId",
              "type": "region"
            } )
            #if($region.lastCrawled)
            	$util.qr($attrs.put("lastCrawled", "$region.lastCrawled"))
            #end
            $util.qr($regions.add($util.dynamodb.toMapValues($attrs)))
        #end

        {
          "version": "2018-05-29",
          "operation": "BatchPutItem",
          "tables": {
            "${PerspectiveSettingsTable}": $utils.toJson($regions)
          }
        }
      ResponseMappingTemplate: |
        {
          "accountId": "$ctx.args.accountId",
          "regions": $utils.toJson($ctx.args.regions)
        }

  PerspectiveAppSyncDeleteRegionsMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      TypeName: Mutation
      FieldName: deleteRegions
      DataSourceName: !GetAtt PerspectiveAppSyncSettingsTableDataSource.Name
      RequestMappingTemplate: !Sub |
        #set($accountId = $ctx.args.accountId)
        #set($regions = [])
        #foreach($region in $ctx.args.regions)
            #set( $attrs = {
              "PK": "Account",
              "SK": "ACCNUMBER#$accountId#REGION#$region.name"
            } )
            $util.qr($regions.add($util.dynamodb.toMapValues($attrs)))
        #end

        {
          "version": "2018-05-29",
          "operation": "BatchDeleteItem",
          "tables": {
            "${PerspectiveSettingsTable}": $utils.toJson($regions)
          }
        }
      ResponseMappingTemplate: |
        {
          "accountId": "$ctx.args.accountId",
          "regions": $utils.toJson($ctx.args.regions)
        }

  PerspectiveAppSyncGetAccountsQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      TypeName: Query
      FieldName: getAccounts
      DataSourceName: !GetAtt PerspectiveAppSyncSettingsLambdaDataSource.Name

  PerspectiveAppSyncAddAccountsMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      TypeName: Mutation
      FieldName: addAccounts
      DataSourceName: !GetAtt PerspectiveAppSyncSettingsLambdaDataSource.Name

  PerspectiveAppSyncUpdateAccountMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      TypeName: Mutation
      FieldName: updateAccount
      DataSourceName: !GetAtt PerspectiveAppSyncSettingsLambdaDataSource.Name

  PerspectiveAppSyncUpdateRegionsMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      TypeName: Mutation
      FieldName: updateRegions
      DataSourceName: !GetAtt PerspectiveAppSyncSettingsLambdaDataSource.Name

  PerspectiveAppSyncDeleteAccountsMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      TypeName: Mutation
      FieldName: deleteAccounts
      DataSourceName: !GetAtt PerspectiveAppSyncSettingsLambdaDataSource.Name
